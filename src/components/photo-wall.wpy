<style lang="scss">
  @import '../assets/style/_variables.scss';

  // ::-webkit-scrollbar {
  //   width: 0;
  //   height: 0;
  //   color: transparent;
  // }

  @keyframes fadeIn {
    0% { opacity: 0; background: #455a64 }
    50% { opacity: 0.2; background: #607d8b }
    100% { opacity: 1; background: #eaeaea}
  }

  .photo {
    box-sizing: border-box;
    position: relative;

    &__content {
      box-sizing: border-box;
      width: 100%;
      height: 100%;
    }

    &__col {
      width: 50%;
      height: 100%;
      margin-top: 30rpx;
      margin-bottom: 30rpx;
      display: inline-block;
      box-sizing: border-box;
      vertical-align: top;
    }

    &__item {
      width: 100%;
      box-sizing: border-box;
      margin-bottom: 30rpx;
      position: relative;
    }

    &__img {
      width: 100%;
      border-top-left-radius: 6rpx;
      border-top-right-radius: 6rpx;
      display: block;
      position: absolute;
      // animation: fadeIn 1s ease;
      top: 0;
      left: 0;
    }

    &__img--bg {
      width: 100%;
      display: block;
      z-index: -1024;
      border-top-left-radius: 6rpx;
      border-top-right-radius: 6rpx;
      background: grey;
    }

    &__operate {
      box-sizing: border-box;
      background: $white;
      border-bottom: 1rpx solid transparent;
      border-left: 1rpx solid transparent;
      border-right: 1rpx solid transparent;
      border-bottom-left-radius: 6rpx;
      border-bottom-right-radius: 6rpx;
      font-size: 30rpx;
      color: $font;
      width: 100%;

      &--tag {
        box-sizing: border-box;
        display: inline-block;
        padding-left: 10rpx;
        padding-right: 10rpx;
        vertical-align: top;
        height: 100%;
        width: 80%;
        white-space: nowrap;
        overflow-x: scroll;
        overflow-y: hidden;
      }
      &--oper {
        box-sizing: border-box;
        text-align: center;
        padding-left: 10rpx;
        padding-right: 10rpx;
        display: inline-block;
        vertical-align: top;
        border-left: 1rpx dashed $light-edge;
        height: 100%;
        width: 20%;
      }
      &--rect {
        width: 10rpx;
        height: 10rpx;
        border-radius: 50%;
        vertical-align: center;
        display: inline-block;
        margin: 2rpx;
        background: $operate;
      }
    }
  }
</style>

<template>
  <view class="photo" style="height: {{scrollHeight}}px">
    <scroll-view class="photo__content" scroll-y="true" lower-threshold="150" 
      style="padding-left: {{contentPdLeft}}rpx;padding-right: {{contentPdRight}}rpx;"
      bindscrolltolower="onScrollToLower">
      <view class="photo__col" style="padding-right: {{colPdRight}}rpx">
        <view class="photo__item" wx:for-items="{{leftPhotos}}" wx:for-item="photo" wx:key="id">
          <image wx:if="{{photo.loaded}}" mode="widthFix" class="photo__img" src="{{photo.normal}}" style="height: {{photo.adaptHeight}}rpx" 
             bindlongpress="onLongpressImage"/>
          <view class="photo__img--bg" style="height: {{photo.adaptHeight}}rpx"></view>
          <view class="photo__operate" style="height: {{tagHeight}}rpx; line-height:{{tagHeight}}rpx; top: {{photo.adaptHeight}}rpx">
            <view class="photo__operate--tag">宋民国、张学友、van、蘑菇头</view>
            <view class="photo__operate--oper" @tap="editMeme({{photo.memeId}})">
              <view class="photo__operate--rect"></view>
              <view class="photo__operate--rect"></view>
              <view class="photo__operate--rect"></view>
            </view>
          </view>
        </view>
      </view>
      <view class="photo__col" style="padding-left: {{colPdLeft}}rpx">
        <view class="photo__item" wx:for-items="{{rightPhotos}}" wx:for-item="photo" wx:key="id">
          <image wx:if="{{photo.loaded}}" mode="widthFix" class="photo__img" src="{{photo.normal}}" style="height: {{photo.adaptHeight}}rpx" 
             bindlongpress="onLongpressImage"/>
          <view class="photo__img--bg" style="height: {{photo.adaptHeight}}rpx"></view>
          <view class="photo__operate" style="height: {{tagHeight}}rpx; line-height:{{tagHeight}}rpx; top: {{photo.adaptHeight}}rpx">
            <view class="photo__operate--tag">宋民国、张学友、van、蘑菇头</view>
            <view class="photo__operate--oper" @tap="editMeme({{photo.memeId}})">
              <view class="photo__operate--rect"></view>
              <view class="photo__operate--rect"></view>
              <view class="photo__operate--rect"></view>
            </view>
          </view>
        </view>
      </view>
    </scroll-view>
  </view>
  <imgload/>
</template>

<script>
  import wepy from 'wepy'
  import Toast from 'wepy-com-toast'
  import ImgLoad from './img-load'
  import MLog from '../mixins/mlog'

  export default class PhotoWall extends wepy.component {

    onLoad() {
      wx.setNavigationBarTitle({
        title: 'Meme'
      })
      this.init()     //初始化数据
    }

    onShow() {
      this.initData()
      this.obtainMeme()
    }

    initSize() {
      //获取窗口信息并设置尺寸信息
      wx.getSystemInfo({
        success: resp => {
          //计算滚动视图的高度，相当于 100vh - 100rpx
          this.scrollHeight = resp.windowHeight - (resp.windowWidth / 750) * 100

          //设置两列的初始高度
          this.col1H = 0
          this.col2H = 0

          //设置内边距 rpx
          this.contentPdLeft = 30
          this.contentPdRight = 30
          this.colPdLeft = 15
          this.colPdRight = 15

          //计算图片自适应宽度 rpx
          this.adaptWidth = ( 750 - (
            this.contentPdLeft
            + this.contentPdRight
            + this.colPdLeft
            + this.colPdRight) ) / 2

          //设置图片下标签的高度 rpx
          this.tagHeight = 80

          this.$apply()
        }
      })
    }

    initData() {
      this.imgArrKey = '0'
      this.images = {}       //每次获取的图片都放进来
      this.leftPhotos = []
      this.rightPhotos = []
      this.scrollLock = false    //触底锁
      this.col1H = 0
      this.col2H = 0
    }

    init() {
      //获取窗口信息并设置尺寸信息
      this.initSize()

      //初始化数据
      this.initData()

      //初始状态先获取一次
      this.obtainMeme()
    }

    testGetImages() {
      return this.photos.slice(0, 10)
    }

    components = {
      imgload: ImgLoad
    }

    props = {
      query: {
        type: String,
        default: '',
      }
    }

    mixins = [MLog]

    data = {
      photos: [
        { memeId: 1, mini: 'http://os5w1n6kc.bkt.clouddn.com/mini-10.jpg', normal: 'http://os5w1n6kc.bkt.clouddn.com/10.jpg', loaded: false, width: 1280, height: 959, sort: 8},
        { memeId: 2, mini: 'http://os5w1n6kc.bkt.clouddn.com/mini-11.jpg', normal: 'http://os5w1n6kc.bkt.clouddn.com/11.jpg', loaded: false, width: 800, height: 533, sort: 9},
        { memeId: 3, mini: 'http://os5w1n6kc.bkt.clouddn.com/mini-01.jpg', normal: 'http://os5w1n6kc.bkt.clouddn.com/01.jpg', loaded: false, width: 394, height: 392, sort: 0},
        { memeId: 4, mini: 'http://os5w1n6kc.bkt.clouddn.com/mini-02.jpg', normal: 'http://os5w1n6kc.bkt.clouddn.com/02.jpg', loaded: false, width: 1440, height: 1080, sort: 1},
        { memeId: 5, mini: 'http://os5w1n6kc.bkt.clouddn.com/mini-04.jpg', normal: 'http://os5w1n6kc.bkt.clouddn.com/04.jpg', loaded: false, width: 564, height: 564, sort: 2},
        { memeId: 6, mini: 'http://os5w1n6kc.bkt.clouddn.com/mini-05.jpg', normal: 'http://os5w1n6kc.bkt.clouddn.com/05.jpg', loaded: false, width: 894, height: 894, sort: 3},
        { memeId: 7, mini: 'http://os5w1n6kc.bkt.clouddn.com/mini-06.jpg', normal: 'http://os5w1n6kc.bkt.clouddn.com/06.jpg', loaded: false, width: 1200, height: 800, sort: 4},
        { memeId: 8, mini: 'http://os5w1n6kc.bkt.clouddn.com/mini-07.jpg', normal: 'http://os5w1n6kc.bkt.clouddn.com/07.jpg', loaded: false, width: 1080, height: 1080, sort: 5},
        { memeId: 9, mini: 'http://os5w1n6kc.bkt.clouddn.com/mini-08.png', normal: 'http://os5w1n6kc.bkt.clouddn.com/08.png', loaded: false, width: 537, height: 453, sort: 6},
        { memeId: 10, mini: 'http://os5w1n6kc.bkt.clouddn.com/mini-09.jpg', normal: 'http://os5w1n6kc.bkt.clouddn.com/09.jpg', loaded: false, width: 1000, height: 667, sort: 7},
      ],
      imgArrKey: '0',
      images: {},       //每次获取的图片都放进来
      leftPhotos: [],
      rightPhotos: [],
      scrollLock: false,    //触底锁

      contentPdLeft: 0,   //照片墙的左内边距 rpx
      contentPdRight: 0,    //照片墙的右内边距 rpx
      colPdLeft: 0,   //列的左内边距 rpx
      colPdRight: 0,    //列的右内边距 rpx
      col1H: 0,   //左列高度 rpx
      col2H: 0,    //右列高度 rpx
      scrollHeight: 0,    //滚动视图的高度 px
      adaptWidth: 0,    //图片自适应宽度 rpx
      tagHeight: 0,   //图片下标签的高度 rpx   
    }

    events = {
      //处理加载完成的图片
      onLoaded: (msg, src, arrKey) => {
        switch (msg) {
          case 'success':
            // this.print(arrKey)
            let list = this.images[arrKey]
            // this.print(this.images)
            let index = list.findIndex(el => el.normal === src)
            list[index].loaded = true
            this.$apply()
            break;
          case 'fail':
            this.print(msg)
            this.$apply()
            break;
        }
      },
    }
    
    methods = {
      //处理 scroll 到底事件
      onScrollToLower: event => {
        if (this.scrollLock) return
        this.scrollLock = true
        setTimeout(() => {
          this.scrollLock = false
          this.$apply()
        }, 1000);
        this.print('触底')
        this.obtainMeme()
      },
      //预览图片
      onPreviewImage: event => {
        let src = event ? event: ''
        wx.previewImage({
          current: src,
          urls: [src]
        })
      },
      //长按图片进行更多操作
      onLongpressImage: event => {
        this.print('onLongpressImage')
      },
      onTouchEnd: event => {
        this.print('onTouchEnd')
      },
      //点击图片下的更多图标
      editMeme: event => {
        let id = event
        wx.navigateTo({
          url: `tag?id=${id}`
        })
      }
    }

    //图片加载之前将图片插入瀑布流，即设置高度以及该放置的列
    setImageToFalls(images) {
      let left = [],right = []
      images.sort((a,b) => a.sort - b.sort)
      console.log(JSON.stringify(images))
      for (let el of images) {
        el.adaptHeight = this.adaptWidth * (el.height / el.width)
        if (this.col1H <= this.col2H) {
          this.col1H += el.adaptHeight + this.tagHeight
          left.push(el)
        } else {
          this.col2H += el.adaptHeight + this.tagHeight
          right.push(el)
        }
      }
      this.leftPhotos = this.leftPhotos.concat(left)
      this.rightPhotos = this.rightPhotos.concat(right)
      this.$apply()
      this.print('赋值完成')
    }

    obtainMeme() {
      let images = this.testGetImages()
      this.images[this.imgArrKey] = images
      this.setImageToFalls(images)
      this.$invoke('imgload','load',images.map(el => ( { src: el.normal, arrKey: this.imgArrKey } )))
      this.imgArrKey = +this.imgArrKey + 1 + ''     //加 1 再转回字符串
      this.$apply()
    }

  }
</script>

